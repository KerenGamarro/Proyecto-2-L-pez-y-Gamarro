/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : STM32 Master I2C - Controla LED del ESP32
  * @description    : Este programa implementa comunicación I2C entre STM32 (maestro)
  *                   y ESP32 (esclavo). Al presionar el botón USER en la NUCLEO,
  *                   se envía un comando via I2C para encender/apagar el LED del ESP32.
  *
  * Conexiones I2C:
  *   - PB8 (I2C1_SCL) → ESP32 GPIO22 (SCL)
  *   - PB9 (I2C1_SDA) → ESP32 GPIO21 (SDA)
  *   - GND común
  *
  * IMPORTANTE: Asegúrate de tener resistencias pull-up de 4.7kΩ en SDA y SCL
  *             (pueden estar en el ESP32 o añadirse externamente)
  ******************************************************************************
  */
#include "main.h"
#include "string.h"
#include "stdio.h"

/* USER CODE END Header */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;       // Handle para I2C1 (comunicación con ESP32)
SPI_HandleTypeDef hspi1;       // Handle para SPI1 (mantener si CubeMX lo generó)
UART_HandleTypeDef huart2;     // Handle para UART2 (debug por serial)

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART2_UART_Init(void);

/* USER CODE BEGIN PV */
#define ESP32_I2C_ADDRESS  0x08   // Dirección I2C del ESP32 (0x08 en 7 bits)
#define I2C_TIMEOUT        100    // Timeout para operaciones I2C en ms

uint8_t ledState = 0;             // Estado actual del LED (0=apagado, 1=encendido)
uint8_t btnLastState = 0;         // Estado previo del botón (para detección de flancos)
uint8_t btnCurrentState = 0;      // Estado actual del botón
/* USER CODE END PV */

int main(void)
{
  /* Inicialización de HAL (Hardware Abstraction Layer) */
  HAL_Init();

  /* Configuración del reloj del sistema */
  SystemClock_Config();

  /* Inicialización de periféricos */
  MX_GPIO_Init();       // Configura los pines GPIO (botón, LED)
  MX_I2C1_Init();       // Configura el periférico I2C1
  MX_USART2_UART_Init(); // Configura UART2 para debug

  /* Mensaje inicial por UART para confirmar que el sistema está listo */
  HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n=================================\r\n", 37, HAL_MAX_DELAY);
  HAL_UART_Transmit(&huart2, (uint8_t*)"STM32 I2C Master Ready\r\n", 24, HAL_MAX_DELAY);
  HAL_UART_Transmit(&huart2, (uint8_t*)"Direccion ESP32: 0x08\r\n", 23, HAL_MAX_DELAY);
  HAL_UART_Transmit(&huart2, (uint8_t*)"=================================\r\n\r\n", 37, HAL_MAX_DELAY);

  HAL_Delay(100);  // Pausa de 100ms para estabilizar

  /* Loop principal infinito */
  while (1)
  {
    /* ========== LECTURA DEL BOTÓN ========== */
    // Lee el estado actual del botón USER (PC13)
    btnCurrentState = HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin);

    /* ========== DETECCIÓN DE FLANCO DE SUBIDA ========== */
    // Solo actúa cuando el botón pasa de NO presionado (0) a presionado (1)
    // Esto evita múltiples envíos mientras el botón está presionado
    if (btnCurrentState == GPIO_PIN_SET && btnLastState == GPIO_PIN_RESET)
    {
      /* Antirrebote: espera 50ms para confirmar que no es ruido */
      HAL_Delay(50);

      /* Verifica que el botón sigue presionado después del antirrebote */
      if (HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin) == GPIO_PIN_SET)
      {
        /* ========== TOGGLE DEL ESTADO DEL LED ========== */
        // Invierte el estado: si estaba en 0 pasa a 1, y viceversa
        ledState = !ledState;

        /* ========== TRANSMISIÓN I2C AL ESP32 ========== */
        // Envía un byte al ESP32 esclavo (dirección 0x08)
        // HAL_I2C_Master_Transmit(handle, dirección_esclavo<<1, datos, tamaño, timeout)
        HAL_StatusTypeDef i2c_status;
        i2c_status = HAL_I2C_Master_Transmit(&hi2c1,
                                             (ESP32_I2C_ADDRESS << 1),
                                             &ledState,
                                             1,
                                             I2C_TIMEOUT);

        /* ========== VERIFICACIÓN DE ESTADO DE TRANSMISIÓN ========== */
        if (i2c_status == HAL_OK) {
          // Transmisión exitosa
          char msg[50];
          sprintf(msg, "I2C OK - Comando enviado: %d\r\n", ledState);
          HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

          /* ========== LED INDICADOR LOCAL ========== */
          // Actualiza el LED local (PC7) en la NUCLEO para reflejar el estado
          HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, ledState ? GPIO_PIN_SET : GPIO_PIN_RESET);
        }
        else if (i2c_status == HAL_TIMEOUT) {
          // Error por timeout (ESP32 no responde)
          HAL_UART_Transmit(&huart2, (uint8_t*)"ERROR I2C: Timeout\r\n", 20, HAL_MAX_DELAY);
        }
        else {
          // Otro error (NACK, error de bus, etc.)
          HAL_UART_Transmit(&huart2, (uint8_t*)"ERROR I2C: Fallo de comunicacion\r\n", 35, HAL_MAX_DELAY);
        }

        HAL_Delay(10);  // Pequeña pausa después de la transmisión
      }
    }

    /* ========== ACTUALIZACIÓN DEL ESTADO ANTERIOR ========== */
    // Guarda el estado actual como el estado anterior para la próxima iteración
    btnLastState = btnCurrentState;

    /* Pausa corta para no saturar el procesador con lecturas continuas */
    HAL_Delay(10);
  }
}

/* ============================================================================ */
/* CONFIGURACIÓN DEL RELOJ DEL SISTEMA                                          */
/* ============================================================================ */
/**
  * @brief  Configura el reloj del sistema
  * @note   Usa el oscilador interno HSI (16 MHz) sin PLL
  *         Voltaje regulado a escala 3 para bajo consumo
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /* Habilita el reloj del módulo de gestión de energía */
  __HAL_RCC_PWR_CLK_ENABLE();

  /* Configura el regulador de voltaje en escala 3 (bajo consumo) */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /* Configura el oscilador HSI (High Speed Internal - 16 MHz) */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;  // Sin PLL
  HAL_RCC_OscConfig(&RCC_OscInitStruct);

  /* Configura los divisores de reloj para los buses del sistema */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|
                                RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;  // SYSCLK = HSI (16 MHz)
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;      // AHB = 16 MHz
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;       // APB1 = 16 MHz
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;       // APB2 = 16 MHz
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
}

/* ============================================================================ */
/* INICIALIZACIÓN DE I2C1                                                       */
/* ============================================================================ */
/**
  * @brief  Configura el periférico I2C1 como maestro
  * @note   Configuración:
  *         - Modo: Standard (100 kHz) o Fast (400 kHz)
  *         - Direccionamiento: 7 bits
  *         - Duty cycle: 2 (para Fast mode)
  *         - PB8: SCL, PB9: SDA
  */
static void MX_I2C1_Init(void)
{
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;              // Velocidad: 100 kHz (Standard Mode)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;      // Duty cycle 2:1 (para Fast mode)
  hi2c1.Init.OwnAddress1 = 0;                  // Dirección propia (maestro no necesita)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT; // Direccionamiento 7 bits
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE; // Sin dirección dual
  hi2c1.Init.OwnAddress2 = 0;                  // Segunda dirección (no usada)
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE; // Sin General Call
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;    // Clock stretching habilitado

  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();  // Error en la inicialización
  }
}

/* ============================================================================ */
/* INICIALIZACIÓN DE USART2                                                     */
/* ============================================================================ */
/**
  * @brief  Configura USART2 para comunicación serial (debug)
  * @note   Configuración estándar:
  *         - Baud rate: 115200
  *         - 8 bits de datos, sin paridad, 1 bit de stop (8N1)
  */
static void MX_USART2_UART_Init(void)
{
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;                  // Velocidad de transmisión
  huart2.Init.WordLength = UART_WORDLENGTH_8B;    // 8 bits por palabra
  huart2.Init.StopBits = UART_STOPBITS_1;         // 1 bit de stop
  huart2.Init.Parity = UART_PARITY_NONE;          // Sin paridad
  huart2.Init.Mode = UART_MODE_TX_RX;             // Transmisión y recepción
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;    // Sin control de flujo
  huart2.Init.OverSampling = UART_OVERSAMPLING_16; // Sobremuestreo x16

  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();  // Error en la inicialización
  }
}

/* ============================================================================ */
/* INICIALIZACIÓN DE GPIO                                                       */
/* ============================================================================ */
/**
  * @brief  Configura los pines GPIO necesarios para la aplicación
  * @note   Pines configurados:
  *         - PC7: LED local (salida)
  *         - PC13: Botón USER (entrada)
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* ========== HABILITAR RELOJES DE LOS PUERTOS GPIO ========== */
  __HAL_RCC_GPIOC_CLK_ENABLE();  // Habilita reloj del puerto C
  __HAL_RCC_GPIOB_CLK_ENABLE();  // Habilita reloj del puerto B (para I2C)

  /* ========== CONFIGURAR LED LOCAL (PC7) ========== */
  // Inicializa el LED apagado
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);

  GPIO_InitStruct.Pin = LED_Pin;                  // Pin PC7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;     // Salida push-pull
  GPIO_InitStruct.Pull = GPIO_NOPULL;             // Sin resistencia pull-up/down
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;    // Velocidad baja (suficiente para LED)
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);

  /* ========== CONFIGURAR BOTÓN USER (PC13) ========== */
  GPIO_InitStruct.Pin = BTN_Pin;                  // Pin PC13
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;         // Entrada digital
  GPIO_InitStruct.Pull = GPIO_NOPULL;             // Sin pull-up/down (botón tiene pull-down externo)
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
}

/* ============================================================================ */
/* NOTA: La función HAL_I2C_MspInit está definida en stm32f4xx_hal_msp.c,      */
/*       generado automáticamente por CubeMX.                                   */
/*       Esta función configura los pines AF (Alternate Function) para I2C:    */
/*       - PB8 como I2C1_SCL (Open Drain, pull-up externo requerido)           */
/*       - PB9 como I2C1_SDA (Open Drain, pull-up externo requerido)           */
/* ============================================================================ */

/* ============================================================================ */
/* MANEJADOR DE ERRORES                                                         */
/* ============================================================================ */
/**
  * @brief  Función llamada cuando ocurre un error
  * @note   Deshabilita interrupciones y entra en loop infinito
  */
void Error_Handler(void)
{
  __disable_irq();  // Deshabilita todas las interrupciones
  while (1)         // Loop infinito
  {
    // El sistema queda bloqueado aquí en caso de error
  }
}

/* ============================================================================ */
/* FUNCIÓN DE ASSERT (solo en modo DEBUG)                                      */
/* ============================================================================ */
#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reporta el nombre del archivo y línea donde falló un assert
  * @param  file: puntero al nombre del archivo
  * @param  line: número de línea donde falló el assert
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  // Implementar código para reportar el error si es necesario
}
#endif
